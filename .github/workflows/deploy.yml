# github action workflow yml file
# 액션의 이름이다.
name: CI
# 아래처럼 변수를 지정할 수 있다. 나중에 S3 디렉토리명을 지정할 수 있다. 
env:
  PROJECT_NAME: Jack_codedeploy
# 언제 액션이 이루어질 지 정할 수 있다. 
# 우리는 deploy 브랜치에 Push되면 자동 배포하도록 정의할 것이다.
on:
  push:
    branches: deploy

# 아래의 Job들이 깃헙 액션에서 진행된다.
jobs:
  # 하나의 Job을 정의한다. 여기서 Job의 이름은 DEPLOY이다.
  deploy:
    name: DEPLOY
      # 빌드가 어느 운영체제에서 돌아가느냐?
    runs-on: ubuntu-18.04
    # 아래는 주석처리 됐지만 깃허브 액션에서 제공하는 인스턴스의 어떤 경로에서 작업할지 지정할 수 있다.
    # 디렉토리 경로에 따라 성공, 실패가 좌지우지 되기 때문에 중요하다. 
    env:
      working-directory: ./BE

      # step은 job의 하위 집합이다. step에서 정의한 작업을 순차적으로 진행한다.
    steps:
      - name: Debug Action
        uses: hmarr/debug-action@v1.0.0
        
        # 맨 처음 정의한 브랜치로 체크아웃한다.
      - name: Checkout
        uses: actions/checkout@v2

        # 메시지를 출력한다.
      - name: Run a one-line script
        run: echo Start Deploy.

        # 여러 가지의 메시지를 출력할 수 있다.
      - name: Run a multi-line script
        run: |
          echo We love Honux,
          echo CodeSquad 2020 Java Backend.
          
        # 자바 버전을 설정해준다.
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      # 도커에 들어가 디버그 
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v2
         
        # Gradle에 실행 권한을 부여한다.
      - name: Grant execute permission for gradlew
        run: |
          echo $(pwd)
          chmod +x gradlew
        shell: bash
        working-directory: ./BE
        # 아래처럼 해당 run이 동작하는 디렉토리를 지정할 수 있다.
      
        # Gradle을 활용해 배포한다.
      - name: Build with Gradle
        run: |
          ./gradlew build -x test
        shell: bash
        working-directory: ./BE

        # 버전마다 이름을 다르게 하기 위해서 GITHUB_SHA라고 하는 해시이름을 활용하여 zip 파일을 만든다.
        # CodeDeploy를 사용하기 위해서는 S3를 거쳐야 한다. 따라서 압축된 파일을 만들어주고 이를 옮긴다.
      - name: Make zip file
        run: |
          echo $(pwd)
          zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash
      
        # AWS 서비스를 사용하기 위한 인증 과정이다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # secret은 settings -> Secret에서 지정할 수 있다. 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      #- name: Setup tmate session
       # uses: mxschmitt/action-tmate@v2
      
        # 배포 zip 파일을 S3에 업로드한다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://issuetracker-deploy/$PROJECT_NAME/$GITHUB_SHA.zip
        #working-directory: ./build/libs

        # 실제로 코드를 배포한다.
      - name: Code Deploy
        run: aws deploy create-deployment --application-name issueTracker-codedeploy --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name dev --s3-location bucket=issuetracker-deploy,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
